~~~~~~~~~~~~~~~~~~~~~~ Good to know ~~~~~~~~~~~~~~~~~~~~~~

L'index est dans la RAM

~~~~~~~~~~~~~~~~~~~~~~ Setup ~~~~~~~~~~~~~~~~~~~~~~

python -m pip install pymongo

Il faut installer Community Edition et le shell mongosh

pwd : MongoDBDec2021


"C:\Program Files\MongoDB\Server\5.0\bin\mongod.exe" --dbpath="c:\data\db"

PATH :
C:\Program Files\mongosh
C:\Program Files\MongoDB\Server\5.0\bin\mongod.exe
c:\data\db
C:\Users\stagiaire\data_mongodb

net start MongoDB
net stop MongoDB

mongod.exe --dbpath "C:\data" 

mongo.exe  (sans mogosh)
connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb


Remote clients will not be able to connect to the mongod.exe, and the mongod.exe will not be able to initialize a replica set unless this value is set to a valid network interface.
By default, MongoDB launches with bindIp set to 127.0.0.1. -in the MongoDB configuration file with bindIp / via the command-line argument --bind_ip
~~~~~~~~~~~~~~~~~~~~~~ Typcal API ~~~~~~~~~~~~~~~~~~~~~~



__Insert document__

client = MongoClient(port=27017)
db=client.business

business = {
        'name' : names[randint(0, (len(names)-1))] + ' ' + names[randint(0, (len(names)-1))]  + ' ' + company_type[randint(0, (len(company_type)-1))],
        'rating' : randint(1, 5),
        'cuisine' : company_cuisine[randint(0, (len(company_cuisine)-1))] 
    }

result=db.reviews.insert_one(business)      (review = collection) 


fivestar = db.reviews.find_one({'rating': 5})  (.find, .count()...)




stargroup=db.reviews.aggregate(
# The Aggregation Pipeline is defined as an array of different operations
[
# The first stage in this pipe is to group data
{ '$group':
    { '_id': "$rating",
     "count" : 
                 { '$sum' :1 }
    }
},
# The second stage in this pipe is to sort the data
{"$sort":  { "_id":1}
}
# Close the array with the ] tag             
] )
# Print the result
for group in stargroup:
    print(group)


~~~~~~~~~~~~~~~~~~~~~~ Typcal commands ~~~~~~~~~~~~~~~~~~~~~~


use DATABASE_NAME   (creation too)
db.dropDatabase()
show dbs (list databases)
db.col_test.insertOne({"name":"John test"})    (on peut passer une liste de document [{}, {}, ...] insertMany()


db.createCollection(name, options)
db.createCollection("mycol", { capped : true, autoIndexID : true, size : 6142800, max : 10000 } )
db.COLLECTION_NAME.drop()

Queries :
db.COLLECTION_NAME.find()
db.COLLECTION_NAME.find().pretty()

Conditions :
Equality : 			{<key>:{$eg;<value>}}		->	db.mycol.find({"by":"tutorials point"}).pretty()
Less than : 			{<key>:{$lt:<value>}}		->	db.mycol.find({"likes":{$lt:50}}).pretty()
Less than equals :		{<key>:{$lte:<value>}}
Greater than : 			{<key>:{$gt:<value>}}
Greater than equals :		{<key>:{$gte:<value>}}
Not Equals :			{<key>:{$ne:<value>}}
Values in an array :		{<key>:{$in:[<value1>, <value2>,……<valueN>]}}
Values not in an array :	{<key>:{$nin:<value>}}	

AND : 	db.mycol.find({ $and: [ {<key1>:<value1>}, { <key2>:<value2>} ] })
OR : 	db.mycol.find({ $or: [ {<key1>:<value1>}, { <key2>:<value2>} ] })
NOT : not
NOR : nor


where likes>10 AND (by = 'tutorials point' OR title = 'MongoDB Overview')  : 	db.mycol.find({"likes": {$gt:10}, $or: [{"by": "tutorials point"}, {"title": "MongoDB Overview"}]}).pretty()

Update :
db.COLLECTION_NAME.update(SELECTION_CRITERIA, UPDATED_DATA)
db.mycol.update({'title':'MongoDB Overview'},{$set:{'title':'New MongoDB Tutorial'}})
db.COLLECTION_NAME.update(<filter>, <update>)

delete : 
db.COLLECTION_NAME.remove(DELLETION_CRITTERIA)

projection : 
db.COLLECTION_NAME.find({},{KEY:1})

miscellaneous :
db.COLLECTION_NAME.find().limit(NUMBER)
db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)
db.COLLECTION_NAME.find().sort({KEY:1})   (-1 = descending)

indexing : 
db.mycol.createIndex({"title":1,"description":-1})
db.COLLECTION_NAME.dropIndex({KEY:1})
db.COLLECTION_NAME.getIndexes()


Query Limitations

Indexing can't be used in queries which use −

    Regular expressions or negation operators like $nin, $not, etc.
    Arithmetic operators like $mod, etc.
    $where clause
Maximum Ranges

    A collection cannot have more than 64 indexes.
    The length of the index name cannot be longer than 125 characters.
    A compound index can have maximum 31 fields indexed.


Aggregation :
db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)
> db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$sum : 1}}}])
	{ "_id" : "tutorials point", "num_tutorial" : 2 }
	{ "_id" : "Neo4j", "num_tutorial" : 1 }
Defined variables : $sum/avg/min/max/push/addToSet/first/last   (push = ajouté la donnée dans un array progressivement)

Pipelining :
$project/match/group/sort/skip/limit/unwind   (To apply to different stages)

Replication = synchro through several servers = redundancy = RAID-like (fonction avec un noeud primaire qui réplique sur les secondaires, le primaire change en cas de problèmes)
mongod --port "PORT" --dbpath "YOUR_DB_DATA_PATH" --replSet "REPLICA_SET_INSTANCE_NAME"
mongod --port 27017 --dbpath "D:\set up\mongodb\data" --replSet rs0
rs.add(HOST_NAME:PORT)

Sharding = stocker la donnée sur de multiples machines

Backup :
mongodump
mongodump --host HOST_NAME --port PORT_NUMBER
mongodump --dbpath DB_PATH --out BACKUP_DIRECTORY
mongodump --collection COLLECTION --db DB_NAME
mongorestore

Deployment:
D:\set up\mongodb\bin>mongostat



TextSearch :
Create text index -
db.posts.createIndex({post_text:"text"})
{
	"createdCollectionAutomatically" : true,
	"numIndexesBefore" : 1,
	"numIndexesAfter" : 2,
	"ok" : 1
}
db.posts.find({$text:{$search:"tutorialspoint"}}).pretty()
Sub-indexing ->db.users.createIndex({"address.city":1,"address.state":1,"address.pincode":1})
> db.users.find({"address.city":"Los Angeles"}).pretty()



Deleting : db.posts.getIndexes() -> db.posts.dropIndex("post_text_text")


Relationship :

Embedded (un field dans l'autre document, désavantage de performance si le document devient trop grand)
Referenced ->
	{
	   "_id":ObjectId("52ffc33cd85242f436000001"),
	   "contact": "987654321",
	   "dob": "01-01-1991",
	   "name": "Tom Benzamin",
	   "address_ids": [
	      ObjectId("52ffc4a5d85242602e000000"),
	      ObjectId("52ffc4a5d85242602e000001")
	   ]
	}
>var result = db.users.findOne({"name":"Tom Benzamin"},{"address_ids":1})
>var addresses = db.address.find({"_id":{"$in":result["address_ids"]}})

References from different collections need MongoDB DBRefs, we need to add additionnal fields in each document


    $ref − This field specifies the collection of the referenced document

    $id − This field specifies the _id field of the referenced document

    $db − This is an optional field and contains the name of the database in which the referenced document lies

Optimisation :

findAndModify

>db.users.find({gender:"M"},{user_name:1,_id:0}).explain()


    The true value of indexOnly indicates that this query has used indexing.

    The cursor field specifies the type of cursor used. BTreeCursor type indicates that an index was used and also gives the name of the index used. BasicCursor indicates that a full scan was made without using any indexes.

    n indicates the number of documents matching returned.

    nscannedObjects indicates the total number of documents scanned.

    nscanned indicates the total number of documents or index entries scanned.

>db.users.find({gender:"M"},{user_name:1,_id:0}).hint({gender:1,user_name:1}).explain()   (forcer avec hint de prendre un certain index)



Creation time of document :
>ObjectId("5349b4ddd2781d08c09890f4").getTimestamp()
ISODate("2014-04-12T21:49:17Z")



MapReduce : 
>db.collection.mapReduce(
   function() {emit(key,value);},  //map function
   function(key,values) {return reduceFunction}, {   //reduce function
      out: collection,
      query: document,
      sort: document,
      limit: number
   }
)


    map is a javascript function that maps a value with a key and emits a key-value pair

    reduce is a javascript function that reduces or groups all the documents having the same key

    out specifies the location of the map-reduce query result

    query specifies the optional selection criteria for selecting documents

    sort specifies the optional sort criteria

    limit specifies the optional maximum number of documents to be returned

>db.posts.mapReduce( 
   function() { emit(this.user_id,1); }, 
   function(key, values) {return Array.sum(values)}, {  
      query:{status:"active"},  
      out:"post_total" 
   }
	
).find()


Regexes :

> db.posts.find({post_text:{$regex:"tutorialspoint"}}).pretty()
>db.posts.find({post_text:/tutorialspoint/})
>db.posts.find({post_text:{$regex:"tutorialspoint",$options:"$i"}})
>db.posts.find({tags:{$regex:"tutorial"}})